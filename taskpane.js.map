{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts"],"sourcesContent":["// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome</h1> </header> <textarea id=\\\"jsonInput\\\" rows=\\\"10\\\" cols=\\\"50\\\" placeholder=\\\"Enter JSON list of words here\\\"></textarea> <button id=\\\"highlightFromJson\\\">Highlight Words from JSON</button> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <h2>Word Highlighter in Microsoft Word Document</h2> <ul id=\\\"highlightedList\\\"></ul> <button id=\\\"initialize\\\">Reset</button> <br/> <button id=\\\"highlight-selected-text\\\">Highlight Selected</button> <button id=\\\"remove-highlight\\\">Remove</button> <br/> <div id=\\\"textbox-container\\\"> </div> <button id=\\\"add-textbox\\\">+</button> <br/> <button id=\\\"highlight-text\\\">Highlight Current</button> <br/> <button id=\\\"get-marked\\\">Save</button> </main> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global document, Office, Word */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Word) {\n    console.log(\"tests\");\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n\n    //document.getElementById(\"run\").onclick = run;\n    document.getElementById(\"highlightFromJson\").onclick = highlightWordsFromJson;\n    document.getElementById(\"add-textbox\").onclick = addTextbox;\n    document.getElementById(\"highlight-text\").onclick = highlightText;\n    document.getElementById(\"highlight-selected-text\").onclick = highlightSelectedWordAndAddTextbox;\n    //document.getElementById(\"get-selected-indices\").onclick = insertTextMarkerAndCount;\n    document.getElementById(\"get-marked\").onclick = createAndSendJsonFromHighlightsAndTextboxes;\n    document.getElementById(\"remove-highlight\").onclick = highlightSelectedWordRed;\n    document.getElementById(\"initialize\").onclick = resetAndFetchData;\n\n  }\n});\nasync function createAndSendJsonFromHighlightsAndTextboxes() {\n  const jsonData = await createJsonFromHighlightsAndTextboxes();\n\n  // Define the endpoint URL\n  const endpointUrl = \"https://localhost:7201/api/DocumentHighlights/UpsertDocumentHighlights\";\n\n  // Set up the request options for the fetch call\n  const requestOptions = {\n      method: 'PUT',\n      headers: {\n          'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(jsonData) // Convert the JSON object to a string\n  };\n\n  // Use the fetch API to send the JSON data to the server\n  fetch(endpointUrl, requestOptions)\n      .then(response => {\n          if (!response.ok) {\n              // Handle HTTP errors\n              throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          return response.json(); // Parse the JSON response\n      })\n      .then(data => {\n          console.log(\"Server response:\", data);\n      })\n      .catch(error => {\n          console.error(\"Error sending data to the server:\", error);\n      });\n}\n\nasync function createJsonFromHighlightsAndTextboxes() {\n  return Word.run(async (context) => {\n      // Access the document properties to get the name\n      \n      // Step 1: Find Highlighted Text Indexes\n      const highlightedWordsAndIndexes = await findHighlightedWordsAndIndexes();\n\n      await context.sync();\n\nconst docProperties = context.document.properties;\n      context.load(docProperties, 'title');\n\n      // Document name\n      const documentName = Office.context.document.url || \"Untitled Document\";\n\n      // Step 2: Retrieve Textbox Values\n      const textboxContainer = document.getElementById('textbox-container');\n      const textboxes = textboxContainer.getElementsByClassName('text-box');\n      let highlights = [];\n\n      for (let textbox of textboxes) {\n          if (textbox.value.trim() !== '') {\n              highlights.push(textbox.value.trim());\n          }\n      }\n\n      // Step 3: Construct the JSON Object\n      let jsonData = {\n          \"name\": documentName, // Use the document name as the \"name\" field\n          \"highlights\": highlights,\n          \"highlightRemovals\": highlightedWordsAndIndexes.map(item => {\n              return { \"start\": item.startIndex, \"end\": item.endIndex };\n          })\n      };\n      console.log(jsonData);\n      return jsonData;\n  }).catch(error => {\n      console.error(\"Error:\", error);\n  });\n}\n\nasync function findHighlightedCharacters() {\n  return Word.run(async (context) => {\n      // Get all paragraphs in the document\n      const paragraphs = context.document.body.paragraphs;\n      context.load(paragraphs);\n      await context.sync();\n\n      let highlightedWords = [];\n\n      // Iterate through paragraphs\n      for (let paragraph of paragraphs.items) {\n          // Get the text range for each paragraph\n          const textRanges = paragraph.getTextRanges([\" \"], true);\n          context.load(textRanges, 'text, font');\n          await context.sync();\n\n          // Iterate through text ranges within the paragraph\n          for (let range of textRanges.items) {\n              // Check if the range is highlighted\n              if (range.font.highlightColor) {\n                  // If highlighted, process the range's text\n                  const words = range.text.match(/\\b[\\w']+\\b/g); // Simple regex to match words\n                  if (words) {\n                      highlightedWords = [...highlightedWords, ...words];\n                  }\n              }\n          }\n      }\n\n      console.log(\"Highlighted Words:\", highlightedWords);\n      return highlightedWords;\n  }).catch(error => {\n      console.error(\"Error:\", error);\n  });\n}\n\nasync function findHighlightedWordsAndIndexes() {\n  return Word.run(async (context) => {\n      const paragraphs = context.document.body.paragraphs;\n      context.load(paragraphs);\n      await context.sync();\n\n      let highlightedWordsAndIndexes = [];\n\n      for (let paragraph of paragraphs.items) {\n          const textRanges = paragraph.getTextRanges([\" \"], true);\n          context.load(textRanges, 'text, font');\n          await context.sync();\n\n          for (let range of textRanges.items) {\n              if (range.font.highlightColor === '#FF0000') {\n                console.log(range);\n\n                let markerIndex = await insertTextMarkerAndCount(context, range);\n\n                // Format the marker to make it less noticeable\n                const markerRange = range.insertText('{text-marker}', 'Before');\n                markerRange.font.size = 1;\n                markerRange.font.color = 'white'; // Assuming a white background\n                await context.sync();\n                const wordText = range.text;\n                let endIndex = markerIndex + wordText.length;\n                highlightedWordsAndIndexes.push({ word: wordText, startIndex: markerIndex, endIndex: endIndex });\n                const searchResults = context.document.body.search('{text-marker}', { matchCase: true, matchWholeWord: false });\n                context.load(searchResults);\n                await context.sync();\n                searchResults.items[0].delete();\n                await context.sync();\n\n                  \n              }\n          }\n      }\n\n      console.log(\"Highlighted Words and Indexes:\", highlightedWordsAndIndexes);\n      return highlightedWordsAndIndexes;\n  }).catch(error => {\n      console.error(\"Error:\", error);\n  });\n}\n\nasync function insertTextMarkerAndCount(context, insertionPoint) {\n  // Insert the unique text marker before the specified insertion point\n  const range = insertionPoint.insertText('{text-marker}', 'Before');\n  \n  // Immediately format the inserted marker to make it less noticeable\n  range.font.size = 1;  // Set the font size to the smallest possible value\n  range.font.color = 'white';  // Set the font color to white, assuming a white background\n\n  await context.sync();\n\n  // Get the whole document's body and its text\n  const body = context.document.body;\n  context.load(body, 'text');\n  await context.sync();\n\n  // Find the position of the unique text marker\n  const markerIndex = body.text.indexOf('{text-marker}');\n\n  if (markerIndex === -1) {\n      console.error(\"Text marker not found.\");\n      return -1; // Marker not found\n  }\n\n  // Remove the text marker\n  const searchResults = body.search('{text-marker}', { matchCase: true, matchWholeWord: false });\n  context.load(searchResults);\n  await context.sync();\n\n  searchResults.items[0].delete();\n  await context.sync();\n\n  return markerIndex;\n}\n\nasync function fetchHighlights() {\n  return Word.run(async (context) => {\n    // Get the document properties to access the document name (title)\n    const docProperties = context.document.properties;\n    context.load(docProperties, 'title');\n    await context.sync();\n\n    // Use the document title as the name parameter in the API call\n    const documentName = encodeURIComponent(docProperties.title || \"Untitled Document\");\n\n    try {\n      const response = await fetch(`https://localhost:7201/api/DocumentHighlights/GetDocumentHighlights?name=${documentName}`);\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json(); // Parse JSON response\n      return data; // Return parsed data\n    } catch (error) {\n      console.error('Error fetching highlights:', error);\n      return null; // Return null or handle error appropriately\n    }\n  }).catch(error => {\n    console.error(\"Error:\", error);\n  });\n}\n\n// Function to create textboxes from API data\nasync function createTextboxesFromApi() {\n  const data = await fetchHighlights(); // Fetch API data\n  \n  if (data && data.response && data.response.highlights) {\n      const container = document.getElementById('textbox-container');\n      data.response.highlights.forEach(highlight => {\n          const newTextbox = document.createElement('input');\n          newTextbox.type = 'text';\n          newTextbox.className = 'text-box';\n          newTextbox.value = highlight; // Set textbox value to highlight\n          container.appendChild(newTextbox);\n          container.appendChild(document.createElement('br'));\n      });\n  } else {\n      console.error('No highlights data found');\n  }\n  return data;\n}\n\nasync function reapplyRedHighlightingFromJson(jsonData) {\n  return Word.run(async (context) => {\n      const body = context.document.body;\n      const paragraphs = body.paragraphs;\n      context.load(paragraphs, 'text');\n      await context.sync();\n\n      let currentCharIndex = 0; // Initialize character count\n\n      // Iterate through paragraphs\n      for (let paragraph of paragraphs.items) {\n          const textRanges = paragraph.getTextRanges([\" \"], true);\n          context.load(textRanges, 'text');\n          await context.sync();\n\n          // Iterate through text ranges within the paragraph\n          for (let range of textRanges.items) {\n              const rangeText = range.text;\n              const rangeLength = rangeText.length + 1; // Including space\n\n              // Check if any highlight removal starts within this range\n              for (let removal of jsonData.highlightRemovals) {\n                  if (removal.start >= currentCharIndex && removal.start < currentCharIndex + rangeLength) {\n                      // Calculate the relative start and end within the range\n                      const relativeStart = Math.max(removal.start - currentCharIndex, 0);\n                      const relativeEnd = Math.min(removal.end - currentCharIndex, rangeLength);\n\n                      // Highlight the range from relativeStart for the specified length\n                      \n                      const highlightRange = range.getRange(Word.RangeLocation.start).expandTo(range.getRange(Word.RangeLocation.end));\n                      console.log(highlightRange);\n                      highlightRange.font.highlightColor = 'yellow'; // Apply red highlight\n                      context.load(highlightRange);\n                  }\n              }\n\n              // Update the current character count\n              currentCharIndex += rangeLength; // Include space\n          }\n      }\n\n      await context.sync();\n  }).catch(error => {\n      console.error(\"Error reapplying red highlighting from JSON:\", error);\n  });\n}\n\nasync function resetAndFetchData() {\n  await removeAllHighlights(); // Remove all highlights from the document\n  deleteExistingTextboxes(); // Delete all existing textboxes\n\n  // Now, create new textboxes with API data\n  var data = await createTextboxesFromApi();\n  await highlightText()\n\n  if (data && data.response){\n    await reapplyRedHighlightingFromJson(data.response);\n  }\n  \n}\n\nfunction removeAllHighlights() {\n  return Word.run(async (context) => {\n      // Get the entire document body\n      var body = context.document.body;\n\n      // Set highlight color to null for the entire body, effectively removing any highlights\n      body.font.highlightColor = null;\n\n      await context.sync();\n  }).catch((error) => {\n      console.error(\"Error removing highlights:\", error);\n  });\n}\n\nfunction deleteExistingTextboxes() {\n  const container = document.getElementById('textbox-container');\n  while (container.firstChild) {\n      container.removeChild(container.firstChild);\n  }\n}\n\nexport async function run() {\n  return Word.run(async (context) => {\n    for (let i = 1; i <= 5; i++) {\n                    const word = (document.getElementById(`word${i}`) as HTMLInputElement).value;\n                    if (word) {\n                        const searchRange = context.document.body.search(word, { matchCase: false, matchWholeWord: true });\n                        context.load(searchRange, 'text, font');\n                        await context.sync();\n\n                        searchRange.items.forEach(item => {\n                            item.font.highlightColor = 'blue';\n                        });\n                    }\n                }\n                await context.sync();\n  });\n}\n\nexport async function highlightWordsFromJson() {\n  return Word.run(async (context) => {\n      // Retrieve and parse the JSON input from the textarea\n      const jsonInput = (document.getElementById(\"jsonInput\") as HTMLTextAreaElement).value;\n      let words;\n      try {\n          words = JSON.parse(jsonInput);\n      } catch (e) {\n          console.error(\"Invalid JSON\");\n          return;\n      }\n\n      if (!Array.isArray(words)) {\n          console.error(\"JSON does not contain an array\");\n          return;\n      }\n\n      // Iterate through the words and highlight them in the document\n      for (const word of words) {\n          if (typeof word === \"string\" && word.trim() !== \"\") {\n              const searchRange = context.document.body.search(word.trim(), { matchCase: false, matchWholeWord: false });\n              context.load(searchRange, 'text, font');\n              await context.sync();\n\n              searchRange.items.forEach(item => {\n                  item.font.highlightColor = 'blue';\n              });\n          }\n      }\n      await context.sync();\n  }).catch(error => {\n      console.error(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}\n\nasync function highlightSelectedWordAndAddTextbox() {\n  await Word.run(async (context) => {\n    // Get the current selection\n    const selection = context.document.getSelection();\n    context.load(selection, 'text');\n\n    await context.sync();\n\n    // Highlight the selected text\n    selection.font.highlightColor = '#FF0000'; // Change 's' to your desired highlight color\n\n    await context.sync();\n\n    // Add the selected word as a new textbox in the UI\n    if (selection.text) {\n      addTextbox(selection.text);\n      // const container = document.getElementById('textbox-container');\n      // const newTextbox = document.createElement('input');\n      // newTextbox.type = 'text';\n      // newTextbox.className = 'text-box';\n      // newTextbox.value = selection.text.trim(); // Set the textbox value to the selected word\n      // container.appendChild(newTextbox);\n      // container.appendChild(document.createElement('br'));\n    }\n    highlightText();\n  }).catch((error) => {\n    console.error(\"Error:\", error);\n  });\n}\n\nasync function highlightSelectedWordRed() {\n  await Word.run(async (context) => {\n    // Get the current selection\n    const selection = context.document.getSelection();\n    context.load(selection, 'text');\n\n    await context.sync();\n\n    // Highlight the selected text\n    selection.font.highlightColor = 'yellow'; // Change 'red' to your desired highlight color\n\n    await context.sync();\n\n  }).catch((error) => {\n    console.error(\"Error:\", error);\n  });\n}\n\nexport async function addTextbox2() {\n  console.log('Adding textbox');\n  var container = document.getElementById('textbox-container');\n  var newTextbox = document.createElement('input');\n  newTextbox.type = 'text';\n  newTextbox.className = 'text-box';\n  container.appendChild(newTextbox);\n  container.appendChild(document.createElement('br'));\n}\n\nexport async function addTextbox(textValue) {\n  // Check if textValue is an event object; if so, set it to an empty string or a default value\n  if (textValue instanceof Event) {\n      textValue = ''; // or some default value you'd like to use\n  }\n\n  console.log('Adding textbox with text: ' + textValue);\n  var container = document.getElementById('textbox-container');\n\n  // Create a container for each textbox and its remove button\n  var textboxContainer = document.createElement('div');\n  textboxContainer.className = 'textbox-wrapper';\n\n  // Create the textbox\n  var newTextbox = document.createElement('input');\n  newTextbox.type = 'text';\n  newTextbox.className = 'text-box';\n  newTextbox.value = textValue; // Set the textbox's value to the passed parameter\n\n  // Create the remove button\n  var removeButton = document.createElement('button');\n  removeButton.textContent = '-';\n  removeButton.className = 'remove-textbox';\n\n  // Append the textbox and the remove button to the textbox container\n  textboxContainer.appendChild(newTextbox);\n  textboxContainer.appendChild(removeButton);\n\n  // Append the textbox container to the main container\n  container.appendChild(textboxContainer);\n\n  // Attach event listener to the remove button\n  removeButton.addEventListener('click', function() {\n      // Remove the textbox container when the remove button is clicked\n      removeTextBox(textboxContainer);\n      \n  });\n}\n\nexport async function removeTextBox(textboxContainer) {\n  console.log('remove');\n  var container = document.getElementById('textbox-container');\n\n  // Find the textbox within the container you're about to remove\n  var textbox = textboxContainer.querySelector('.text-box');\n\n  // Check if the textbox contains text\n  if (textbox && textbox.value.trim() !== '') {\n      // Call clearHighlight with the content of the textbox\n      await clearHighlight(textbox.value.trim());\n  }\n\n  // Remove the textbox container\n  container?.removeChild(textboxContainer);\n}\n\n\nexport async function highlightText() {\n  await Word.run(async (context) => {\n      var textboxes = document.getElementsByClassName('text-box');\n      var searchQueries = [];\n\n      for (let textbox of textboxes) {\n          if (textbox.value) {\n              searchQueries.push(textbox.value);\n          }\n      }\n\n      for (let query of searchQueries) {\n          var searchResults = context.document.body.search(query, { matchCase: false, matchWholeWord: true });\n          context.load(searchResults, 'items');\n          await context.sync();\n\n          for (let result of searchResults.items) {\n              result.font.highlightColor = '#FF0000'; // Change as needed\n          }\n      }\n\n      await context.sync();\n  });\n}\n\nexport async function clearHighlight(textToClear) {\n  await Word.run(async (context) => {\n    // Search for the text in the document body\n    console.log(textToClear);\n    var searchResults = context.document.body.search(textToClear, { matchCase: false, matchWholeWord: true });\n    \n    // Queue a command to load the search results\n    context.load(searchResults, 'items');\n    await context.sync();\n\n    // Iterate through the search results and clear the highlight\n    searchResults.items.forEach((result) => {\n      console.log(result);\n      result.font.highlightColor = ''; // Attempt to clear the highlight by setting it to 'No Color'\n    });\n\n    // Synchronize the document state by executing queued commands\n    await context.sync();\n  });\n}\n\nexport async function findBlueHighlights() {\n  return Word.run(async (context) => {\n      // Get the whole document body range\n      const bodyRange = context.document.body.getRange();\n      // Split the range by character formats\n      var wordRanges = bodyRange.getTextRanges([' '], true);\n      context.load(wordRanges, 'items/text, items/font');\n      await context.sync();\n\n      let highlightedTexts = [];\n\n      // Iterate over each range\n      wordRanges.items.forEach(range => {\n        console.log(range.text);\n        console.log(range.font.highlightColor);\n          if (range.font.highlightColor === \"#0000FF\") { \n        \n            highlightedTexts.push(range.text);\n        }\n      });\n\n      // Update the HTML list with the highlighted texts\n      const list = document.getElementById(\"highlightedList\"); // Ensure this element is in your HTML\n      list.innerHTML = \"\"; // Clear existing list\n\n      highlightedTexts.forEach(text => {\n        console.log(text);\n          const listItem = document.createElement(\"li\");\n          listItem.textContent = text;\n          list.appendChild(listItem);\n      });\n  }).catch(error => {\n      console.error(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n          console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n  });\n}"],"names":["___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","b","baseURI","self","href","async","createAndSendJsonFromHighlightsAndTextboxes","jsonData","Word","run","highlightedWordsAndIndexes","paragraphs","context","body","load","sync","paragraph","items","textRanges","getTextRanges","range","font","highlightColor","console","log","markerIndex","insertTextMarkerAndCount","markerRange","insertText","size","color","wordText","text","endIndex","push","word","startIndex","searchResults","search","matchCase","matchWholeWord","delete","catch","error","findHighlightedWordsAndIndexes","docProperties","properties","documentName","Office","textboxes","getElementById","getElementsByClassName","highlights","textbox","value","trim","map","item","createJsonFromHighlightsAndTextboxes","requestOptions","method","headers","JSON","stringify","fetch","then","response","ok","status","json","data","insertionPoint","indexOf","resetAndFetchData","container","firstChild","removeChild","deleteExistingTextboxes","encodeURIComponent","title","statusText","fetchHighlights","forEach","highlight","newTextbox","createElement","type","className","appendChild","createTextboxesFromApi","highlightText","currentCharIndex","rangeLength","removal","highlightRemovals","start","Math","max","min","end","highlightRange","getRange","RangeLocation","expandTo","reapplyRedHighlightingFromJson","highlightWordsFromJson","jsonInput","words","parse","Array","isArray","searchRange","OfficeExtension","debugInfo","highlightSelectedWordAndAddTextbox","selection","getSelection","addTextbox","highlightSelectedWordRed","textValue","Event","textboxContainer","removeButton","textContent","addEventListener","querySelector","textToClear","result","clearHighlight","removeTextBox","searchQueries","query","onReady","info","host","HostType","style","display","onclick","URL"],"sourceRoot":""}